import Icon from 'react-native-vector-icons/Ionicons';
import { StyleSheet, View, FlatList, Alert } from 'react-native';
import React from 'react';
import { StackNavigationProp } from '@react-navigation/stack';
import { useNavigation } from '@react-navigation/native';

import { formatDateRange } from '@/shared/utils/date';
import Text from '@/shared/ui/Text';
import { showAIQuestionModal } from '@/shared/ui/AIQuestionModal/showAIQuestionModal';
import { ThemeColors } from '@/shared/theme/types';
import { useTheme } from '@/shared/theme';
import { useUser } from '@/shared/hooks/useUser';
import { useDaysPosts } from '@/shared/hooks/useDaysPosts';
import { useDailyFirstLogin } from '@/shared/hooks/useDailyFirstLogin';
import { SPACING } from '@/shared/constants';
import { sendToGPT } from '@/shared/api/AIActions';
import { RootStackParamList } from '@/navigation/types';
import { useUserStore } from '@/entities/user/store/userStore';
import { useLentStore } from '@/entities/lent/store/store';
import { weekAnalysisPrompt, questionPrompt } from '@/entities/assiatent/promts';
import { AICard } from '@/entities/ai/AiCard';

type AIBlock = {
  id: string;
  title: string;
  description: string;
  action: () => void | Promise<void>;
};

const AIPage = ({ changeTab }: { changeTab: (tab: number) => void }) => {
  useDailyFirstLogin();
  const { colors } = useTheme();
  const styles = createStyles(colors);
  const { postsData, checkIns } = useDaysPosts(4);
  const { addCustomPost } = useLentStore();
  const user = useUser();
  const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
  const { ai_tokens, minusAiToken } = useUserStore();

  const checkAiTokens = () => {
    if (ai_tokens <= 0) {
      Alert.alert('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã(');
      return false;
    }
    return true;
  };

  const aiBlocks: AIBlock[] = [
    {
      id: '1',
      title: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏',
      description:
        '–†–∞—Å—Å–∫–∞–∂–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ —Ç–≤–æ–µ–π –Ω–µ–¥–µ–ª–µ ‚Äî –∏ –≤–µ—Ä–Ω—ë–º –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ üíõ',
      action: async () => {
        if (!checkAiTokens()) {
          return;
        }

        try {
          const prompt = weekAnalysisPrompt(checkIns, user.userData || {});

          const aiResponseID = await sendToGPT(prompt);

          if (typeof aiResponseID === 'number') {
            minusAiToken();
          }

          addCustomPost({
            date: new Date().toISOString(),
            id: aiResponseID,
            type: 'ai_text',
            title: 'AI –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏' + ' ' + formatDateRange(new Date().toISOString()),
            data: {
              status: 'processing',
              result: '',
            },
          });
          changeTab(0);
        } catch {
          Alert.alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(');
          return;
        }
      },
    },
    {
      id: '2',
      title: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
      description:
        '–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ —É –Ω–∞—à–µ–≥–æ AI-–ø—Å–∏—Ö–æ–ª–æ–≥–∞ ‚Äî –∏ –ø–æ–ª—É—á–∏ —Ç—ë–ø–ª—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π ü™Ñ',
      action: async () => {
        if (!checkAiTokens()) {
          return;
        }

        try {
          const question = await showAIQuestionModal();
          changeTab(0);
          const prompt = questionPrompt(postsData.slice(0, 2), user.userData, question);
          const aiResponseID = await sendToGPT(prompt);

          if (typeof aiResponseID === 'number') {
            minusAiToken();
          }

          addCustomPost({
            date: new Date().toISOString(),
            id: aiResponseID,
            type: 'ai_text',
            title: `AI –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${question}`,
            data: {
              status: 'processing',
              result: '',
            },
          });
        } catch {
          console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞');
        }
      },
    },
    {
      id: '3',
      title: '–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç',
      description: '–°–æ—Å—Ç–∞–≤–∏–º –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.',
      action: async () => {
        if (!checkAiTokens()) {
          return;
        }
        navigation.navigate('AiPlayListPage');
        return;
      },
    },
    {
      id: '4',
      title: '–ü—Ä–∏–¥—É–º–∞—Ç—å –ø–ª–∞–Ω—ã',
      description:
        '–û—Ç–ø—Ä–∞–≤–∏–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤–∑–∞–º–µ–Ω –ø–æ–ª—É—á–∏–º –ø–æ–¥–±—Ä–∫—É –∏–¥–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é/–≤—ã—Ö–æ–¥–Ω—ã–µ/–≤–µ—á–µ—Ä',
      action: async () => {
        if (!checkAiTokens()) {
          return;
        }
        navigation.navigate('AiPlans');
        return;
      },
    },
  ];

  const renderAIBlock = ({ item }: { item: AIBlock }) => (
    <AICard description={item.description} title={item.title} onPress={item.action} />
  );

  return (
    <View style={styles.container}>
      <Text style={styles.pageTitle} variant='h2'>
        AI –ü–æ–º–æ—â–Ω–∏–∫
      </Text>

      <FlatList
        contentContainerStyle={styles.listContainer}
        data={aiBlocks}
        keyExtractor={(item) => item.id}
        ListFooterComponent={<View style={{ height: 100 }} />}
        ListHeaderComponent={
          <View style={{ marginBottom: SPACING.LARGE }}>
            <View style={{ marginBottom: SPACING.LARGE }}>
              <Text style={{ color: colors.PRIMARY }} variant='h3'>
                {ai_tokens} <Icon color={colors.PRIMARY} name='star' size={18} />
              </Text>
            </View>
            <Text color='textSecondary' variant='body2'>
              –ü–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </Text>
          </View>
        }
        renderItem={renderAIBlock}
        showsVerticalScrollIndicator={false}
      />
    </View>
  );
};

const createStyles = (colors: ThemeColors) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.BACKGROUND_PRIMARY,
      paddingHorizontal: SPACING.LARGE,
    },
    pageTitle: {
      color: colors.TEXT_PRIMARY,
      textAlign: 'left',
      marginBottom: SPACING.LARGE,
    },
    listContainer: {
      paddingBottom: SPACING.LARGE,
    },
  });

export default AIPage;
