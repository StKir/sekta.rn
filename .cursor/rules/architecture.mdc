---
description: 
globs: 
alwaysApply: false
---
# Архитектура проекта

## Feature-Sliced Design (FSD)

Проект придерживается архитектуры Feature-Sliced Design (FSD) - методологии, которая структурирует код по уровням абстракции и бизнес-доменам.

### Текущая структура проекта:

```
app/
├── pages/          // Композиционный слой для страниц приложения
├── widgets/        // Композиционный слой для независимых блоков интерфейса
├── features/       // Слой с бизнес-логикой (действия пользователя)
├── entities/       // Слой бизнес-сущностей
├── shared/         // Переиспользуемые модули, утилиты, интерфейсы, константы
└── navigation/     // Навигационная структура приложения
```

### Описание слоев:

1. **pages** - страницы приложения, композиция виджетов

   - Профиль
   - Календарь
   - Тусы
   - Лента

2. **widgets** - независимые блоки интерфейса, композиция фич и сущностей

   - Компоненты верхнего уровня, которые объединяют несколько фич
   - Каждый виджет должен быть независимым и переиспользуемым
   - Виджеты могут содержать свое состояние

3. **features** - обособленная бизнес-логика, действия пользователя

   - Авторизация
   - Регистрация
   - Фильтрация
   - Каждая фича должна быть изолирована
   - Фичи могут использовать другие фичи только через публичный API

4. **entities** - бизнес-сущности

   - Пользователь
   - Событие
   - Пост
   - Сущности не должны зависеть друг от друга
   - Каждая сущность должна иметь свои типы и интерфейсы

5. **shared** - переиспользуемые модули

   - UI-компоненты
   - Утилиты
   - API-клиенты
   - Типы
   - Константы
   - Все компоненты должны быть максимально атомарными
   - Не должно быть бизнес-логики

6. **navigation** - навигационная структура приложения
   - Стек-навигация
   - Табы
   - Вся логика навигации должна быть централизована
   - Используем типизированные параметры навигации

### Правила импортов:

- Слои могут зависеть только от нижестоящих слоев:
  - pages → widgets → features → entities → shared
  - Запрещены циклические зависимости
  - Нижестоящие слои не должны зависеть от вышестоящих

### Правила именования:

1. **Директории**
   - Используем kebab-case: `user-profile`, `auth-form`
   - Группируем связанные файлы в поддиректории

2. **Файлы**
   - Компоненты: PascalCase (`UserProfile.tsx`)
   - Утилиты: camelCase (`formatDate.ts`)
   - Типы: PascalCase с суффиксом .types (`User.types.ts`)
   - Стили: camelCase с суффиксом .styles (`userProfile.styles.ts`)

### Структура компонента:

```
ComponentName/
├── index.ts               // Публичный API
├── ComponentName.tsx      // Основной компонент
├── ComponentName.types.ts // Типы
├── ComponentName.styles.ts// Стили
├── constants.ts          // Константы
├── hooks/               // Хуки компонента
├── lib/                // Утилиты компонента
└── components/         // Подкомпоненты
```

### Правила организации кода:

1. **Изоляция**
   - Каждый слой должен быть максимально изолирован
   - Минимизируем связи между компонентами
   - Используем композицию вместо наследования

2. **Переиспользование**
   - Выносим общую логику в shared
   - Создаем абстракции для повторяющегося кода
   - Используем хуки для переиспользования логики

3. **Типизация**
   - Все должно быть типизировано
   - Избегаем any
   - Используем интерфейсы для публичного API
